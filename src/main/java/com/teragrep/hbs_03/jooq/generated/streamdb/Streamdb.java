/*
 * This file is generated by jOOQ.
 */
package com.teragrep.hbs_03.jooq.generated.streamdb;


import com.teragrep.hbs_03.jooq.generated.DefaultCatalog;
import com.teragrep.hbs_03.jooq.generated.streamdb.tables.Host;
import com.teragrep.hbs_03.jooq.generated.streamdb.tables.LogGroup;
import com.teragrep.hbs_03.jooq.generated.streamdb.tables.Stream;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Catalog;
import org.jooq.Table;
import org.jooq.impl.SchemaImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Streamdb extends SchemaImpl {

    private static final long serialVersionUID = 160503723;

    /**
     * The reference instance of <code>streamdb</code>
     */
    public static final Streamdb STREAMDB = new Streamdb();

    /**
     * The table <code>streamdb.host</code>.
     */
    public final Host HOST = com.teragrep.hbs_03.jooq.generated.streamdb.tables.Host.HOST;

    /**
     * The table <code>streamdb.log_group</code>.
     */
    public final LogGroup LOG_GROUP = com.teragrep.hbs_03.jooq.generated.streamdb.tables.LogGroup.LOG_GROUP;

    /**
     * The table <code>streamdb.stream</code>.
     */
    public final Stream STREAM = com.teragrep.hbs_03.jooq.generated.streamdb.tables.Stream.STREAM;

    /**
     * No further instances allowed
     */
    private Streamdb() {
        super("streamdb", null);
    }


    @Override
    public Catalog getCatalog() {
        return DefaultCatalog.DEFAULT_CATALOG;
    }

    @Override
    public final List<Table<?>> getTables() {
        List result = new ArrayList();
        result.addAll(getTables0());
        return result;
    }

    private final List<Table<?>> getTables0() {
        return Arrays.<Table<?>>asList(
            Host.HOST,
            LogGroup.LOG_GROUP,
            Stream.STREAM);
    }
}
