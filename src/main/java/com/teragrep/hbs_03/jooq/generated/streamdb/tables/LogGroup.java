/*
 * This file is generated by jOOQ.
 */
package com.teragrep.hbs_03.jooq.generated.streamdb.tables;


import com.teragrep.hbs_03.jooq.generated.streamdb.Indexes;
import com.teragrep.hbs_03.jooq.generated.streamdb.Keys;
import com.teragrep.hbs_03.jooq.generated.streamdb.Streamdb;
import com.teragrep.hbs_03.jooq.generated.streamdb.tables.records.LogGroupRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class LogGroup extends TableImpl<LogGroupRecord> {

    private static final long serialVersionUID = -1922610862;

    /**
     * The reference instance of <code>streamdb.log_group</code>
     */
    public static final LogGroup LOG_GROUP = new LogGroup();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LogGroupRecord> getRecordType() {
        return LogGroupRecord.class;
    }

    /**
     * The column <code>streamdb.log_group.id</code>.
     */
    public final TableField<LogGroupRecord, UInteger> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>streamdb.log_group.name</code>.
     */
    public final TableField<LogGroupRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * Create a <code>streamdb.log_group</code> table reference
     */
    public LogGroup() {
        this(DSL.name("log_group"), null);
    }

    /**
     * Create an aliased <code>streamdb.log_group</code> table reference
     */
    public LogGroup(String alias) {
        this(DSL.name(alias), LOG_GROUP);
    }

    /**
     * Create an aliased <code>streamdb.log_group</code> table reference
     */
    public LogGroup(Name alias) {
        this(alias, LOG_GROUP);
    }

    private LogGroup(Name alias, Table<LogGroupRecord> aliased) {
        this(alias, aliased, null);
    }

    private LogGroup(Name alias, Table<LogGroupRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> LogGroup(Table<O> child, ForeignKey<O, LogGroupRecord> key) {
        super(child, key, LOG_GROUP);
    }

    @Override
    public Schema getSchema() {
        return Streamdb.STREAMDB;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.LOG_GROUP_PRIMARY);
    }

    @Override
    public Identity<LogGroupRecord, UInteger> getIdentity() {
        return Keys.IDENTITY_LOG_GROUP;
    }

    @Override
    public UniqueKey<LogGroupRecord> getPrimaryKey() {
        return Keys.KEY_LOG_GROUP_PRIMARY;
    }

    @Override
    public List<UniqueKey<LogGroupRecord>> getKeys() {
        return Arrays.<UniqueKey<LogGroupRecord>>asList(Keys.KEY_LOG_GROUP_PRIMARY);
    }

    @Override
    public LogGroup as(String alias) {
        return new LogGroup(DSL.name(alias), this);
    }

    @Override
    public LogGroup as(Name alias) {
        return new LogGroup(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public LogGroup rename(String name) {
        return new LogGroup(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public LogGroup rename(Name name) {
        return new LogGroup(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<UInteger, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
