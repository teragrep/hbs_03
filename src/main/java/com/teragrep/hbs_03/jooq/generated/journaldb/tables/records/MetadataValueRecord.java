/*
 * Teragrep Metadata Using HBase (hbs_03)
 * Copyright (C) 2024 Suomen Kanuuna Oy
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 *
 *
 * Additional permission under GNU Affero General Public License version 3
 * section 7
 *
 * If you modify this Program, or any covered work, by linking or combining it
 * with other code, such other code is not for that reason alone subject to any
 * of the requirements of the GNU Affero GPL version 3 as long as this Program
 * is the same Program as licensed from Suomen Kanuuna Oy without any additional
 * modifications.
 *
 * Supplemented terms under GNU Affero General Public License version 3
 * section 7
 *
 * Origin of the software must be attributed to Suomen Kanuuna Oy. Any modified
 * versions must be marked as "Modified version of" The Program.
 *
 * Names of the licensors and authors may not be used for publicity purposes.
 *
 * No rights are granted for use of trade names, trademarks, or service marks
 * which are in The Program if any.
 *
 * Licensee must indemnify licensors and authors for any liability that these
 * contractual assumptions impose on licensors and authors.
 *
 * To the extent this program is licensed as part of the Commercial versions of
 * Teragrep, the applicable Commercial License may apply to this file if you as
 * a licensee so wish it.
 *//*
 * This file is generated by jOOQ.
 */
package com.teragrep.hbs_03.jooq.generated.journaldb.tables.records;


import com.teragrep.hbs_03.jooq.generated.journaldb.tables.MetadataValue;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MetadataValueRecord extends UpdatableRecordImpl<MetadataValueRecord> implements Record4<ULong, ULong, String, String> {

    private static final long serialVersionUID = 2024573541;

    /**
     * Setter for <code>journaldb.metadata_value.id</code>.
     */
    public void setId(ULong value) {
        set(0, value);
    }

    /**
     * Getter for <code>journaldb.metadata_value.id</code>.
     */
    public ULong getId() {
        return (ULong) get(0);
    }

    /**
     * Setter for <code>journaldb.metadata_value.logfile_id</code>. Foreign key referencing Logfile.id
     */
    public void setLogfileId(ULong value) {
        set(1, value);
    }

    /**
     * Getter for <code>journaldb.metadata_value.logfile_id</code>. Foreign key referencing Logfile.id
     */
    public ULong getLogfileId() {
        return (ULong) get(1);
    }

    /**
     * Setter for <code>journaldb.metadata_value.value_key</code>. Identifier key for the attribute
     */
    public void setValueKey(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>journaldb.metadata_value.value_key</code>. Identifier key for the attribute
     */
    public String getValueKey() {
        return (String) get(2);
    }

    /**
     * Setter for <code>journaldb.metadata_value.value</code>. Value of the attribute
     */
    public void setValue(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>journaldb.metadata_value.value</code>. Value of the attribute
     */
    public String getValue() {
        return (String) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<ULong> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<ULong, ULong, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<ULong, ULong, String, String> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<ULong> field1() {
        return MetadataValue.METADATA_VALUE.ID;
    }

    @Override
    public Field<ULong> field2() {
        return MetadataValue.METADATA_VALUE.LOGFILE_ID;
    }

    @Override
    public Field<String> field3() {
        return MetadataValue.METADATA_VALUE.VALUE_KEY;
    }

    @Override
    public Field<String> field4() {
        return MetadataValue.METADATA_VALUE.VALUE;
    }

    @Override
    public ULong component1() {
        return getId();
    }

    @Override
    public ULong component2() {
        return getLogfileId();
    }

    @Override
    public String component3() {
        return getValueKey();
    }

    @Override
    public String component4() {
        return getValue();
    }

    @Override
    public ULong value1() {
        return getId();
    }

    @Override
    public ULong value2() {
        return getLogfileId();
    }

    @Override
    public String value3() {
        return getValueKey();
    }

    @Override
    public String value4() {
        return getValue();
    }

    @Override
    public MetadataValueRecord value1(ULong value) {
        setId(value);
        return this;
    }

    @Override
    public MetadataValueRecord value2(ULong value) {
        setLogfileId(value);
        return this;
    }

    @Override
    public MetadataValueRecord value3(String value) {
        setValueKey(value);
        return this;
    }

    @Override
    public MetadataValueRecord value4(String value) {
        setValue(value);
        return this;
    }

    @Override
    public MetadataValueRecord values(ULong value1, ULong value2, String value3, String value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached MetadataValueRecord
     */
    public MetadataValueRecord() {
        super(MetadataValue.METADATA_VALUE);
    }

    /**
     * Create a detached, initialised MetadataValueRecord
     */
    public MetadataValueRecord(ULong id, ULong logfileId, String valueKey, String value) {
        super(MetadataValue.METADATA_VALUE);

        set(0, id);
        set(1, logfileId);
        set(2, valueKey);
        set(3, value);
    }
}
