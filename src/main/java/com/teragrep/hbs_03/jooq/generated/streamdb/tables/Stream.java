/*
 * This file is generated by jOOQ.
 */
package com.teragrep.hbs_03.jooq.generated.streamdb.tables;


import com.teragrep.hbs_03.jooq.generated.streamdb.Indexes;
import com.teragrep.hbs_03.jooq.generated.streamdb.Keys;
import com.teragrep.hbs_03.jooq.generated.streamdb.Streamdb;
import com.teragrep.hbs_03.jooq.generated.streamdb.tables.records.StreamRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Stream extends TableImpl<StreamRecord> {

    private static final long serialVersionUID = -1729817909;

    /**
     * The reference instance of <code>streamdb.stream</code>
     */
    public static final Stream STREAM = new Stream();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StreamRecord> getRecordType() {
        return StreamRecord.class;
    }

    /**
     * The column <code>streamdb.stream.id</code>.
     */
    public final TableField<StreamRecord, UInteger> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>streamdb.stream.gid</code>.
     */
    public final TableField<StreamRecord, UInteger> GID = createField(DSL.name("gid"), org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>streamdb.stream.directory</code>.
     */
    public final TableField<StreamRecord, String> DIRECTORY = createField(DSL.name("directory"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>streamdb.stream.stream</code>.
     */
    public final TableField<StreamRecord, String> STREAM_ = createField(DSL.name("stream"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>streamdb.stream.tag</code>.
     */
    public final TableField<StreamRecord, String> TAG = createField(DSL.name("tag"), org.jooq.impl.SQLDataType.VARCHAR(48).nullable(false), this, "");

    /**
     * Create a <code>streamdb.stream</code> table reference
     */
    public Stream() {
        this(DSL.name("stream"), null);
    }

    /**
     * Create an aliased <code>streamdb.stream</code> table reference
     */
    public Stream(String alias) {
        this(DSL.name(alias), STREAM);
    }

    /**
     * Create an aliased <code>streamdb.stream</code> table reference
     */
    public Stream(Name alias) {
        this(alias, STREAM);
    }

    private Stream(Name alias, Table<StreamRecord> aliased) {
        this(alias, aliased, null);
    }

    private Stream(Name alias, Table<StreamRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Stream(Table<O> child, ForeignKey<O, StreamRecord> key) {
        super(child, key, STREAM);
    }

    @Override
    public Schema getSchema() {
        return Streamdb.STREAMDB;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.STREAM_GID, Indexes.STREAM_PRIMARY);
    }

    @Override
    public Identity<StreamRecord, UInteger> getIdentity() {
        return Keys.IDENTITY_STREAM;
    }

    @Override
    public UniqueKey<StreamRecord> getPrimaryKey() {
        return Keys.KEY_STREAM_PRIMARY;
    }

    @Override
    public List<UniqueKey<StreamRecord>> getKeys() {
        return Arrays.<UniqueKey<StreamRecord>>asList(Keys.KEY_STREAM_PRIMARY);
    }

    @Override
    public List<ForeignKey<StreamRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<StreamRecord, ?>>asList(Keys.STREAM_IBFK_1);
    }

    public LogGroup logGroup() {
        return new LogGroup(this, Keys.STREAM_IBFK_1);
    }

    @Override
    public Stream as(String alias) {
        return new Stream(DSL.name(alias), this);
    }

    @Override
    public Stream as(Name alias) {
        return new Stream(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Stream rename(String name) {
        return new Stream(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Stream rename(Name name) {
        return new Stream(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<UInteger, UInteger, String, String, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
