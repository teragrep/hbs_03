/*
 * This file is generated by jOOQ.
 */
package com.teragrep.hbs_03.jooq.generated.journaldb.tables;


import com.teragrep.hbs_03.jooq.generated.journaldb.Indexes;
import com.teragrep.hbs_03.jooq.generated.journaldb.Journaldb;
import com.teragrep.hbs_03.jooq.generated.journaldb.Keys;
import com.teragrep.hbs_03.jooq.generated.journaldb.tables.records.MetadataValueRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MetadataValue extends TableImpl<MetadataValueRecord> {

    private static final long serialVersionUID = 805936710;

    /**
     * The reference instance of <code>journaldb.metadata_value</code>
     */
    public static final MetadataValue METADATA_VALUE = new MetadataValue();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MetadataValueRecord> getRecordType() {
        return MetadataValueRecord.class;
    }

    /**
     * The column <code>journaldb.metadata_value.id</code>.
     */
    public final TableField<MetadataValueRecord, ULong> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>journaldb.metadata_value.logfile_id</code>. Foreign key referencing Logfile.id
     */
    public final TableField<MetadataValueRecord, ULong> LOGFILE_ID = createField(DSL.name("logfile_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "Foreign key referencing Logfile.id");

    /**
     * The column <code>journaldb.metadata_value.value_key</code>. Identifier key for the attribute
     */
    public final TableField<MetadataValueRecord, String> VALUE_KEY = createField(DSL.name("value_key"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "Identifier key for the attribute");

    /**
     * The column <code>journaldb.metadata_value.value</code>. Value of the attribute
     */
    public final TableField<MetadataValueRecord, String> VALUE = createField(DSL.name("value"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "Value of the attribute");

    /**
     * Create a <code>journaldb.metadata_value</code> table reference
     */
    public MetadataValue() {
        this(DSL.name("metadata_value"), null);
    }

    /**
     * Create an aliased <code>journaldb.metadata_value</code> table reference
     */
    public MetadataValue(String alias) {
        this(DSL.name(alias), METADATA_VALUE);
    }

    /**
     * Create an aliased <code>journaldb.metadata_value</code> table reference
     */
    public MetadataValue(Name alias) {
        this(alias, METADATA_VALUE);
    }

    private MetadataValue(Name alias, Table<MetadataValueRecord> aliased) {
        this(alias, aliased, null);
    }

    private MetadataValue(Name alias, Table<MetadataValueRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> MetadataValue(Table<O> child, ForeignKey<O, MetadataValueRecord> key) {
        super(child, key, METADATA_VALUE);
    }

    @Override
    public Schema getSchema() {
        return Journaldb.JOURNALDB;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.METADATA_VALUE_LOGFILE_ID, Indexes.METADATA_VALUE_PRIMARY);
    }

    @Override
    public Identity<MetadataValueRecord, ULong> getIdentity() {
        return Keys.IDENTITY_METADATA_VALUE;
    }

    @Override
    public UniqueKey<MetadataValueRecord> getPrimaryKey() {
        return Keys.KEY_METADATA_VALUE_PRIMARY;
    }

    @Override
    public List<UniqueKey<MetadataValueRecord>> getKeys() {
        return Arrays.<UniqueKey<MetadataValueRecord>>asList(Keys.KEY_METADATA_VALUE_PRIMARY);
    }

    @Override
    public List<ForeignKey<MetadataValueRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<MetadataValueRecord, ?>>asList(Keys.METADATA_VALUE_IBFK_1);
    }

    public Logfile logfile() {
        return new Logfile(this, Keys.METADATA_VALUE_IBFK_1);
    }

    @Override
    public MetadataValue as(String alias) {
        return new MetadataValue(DSL.name(alias), this);
    }

    @Override
    public MetadataValue as(Name alias) {
        return new MetadataValue(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MetadataValue rename(String name) {
        return new MetadataValue(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MetadataValue rename(Name name) {
        return new MetadataValue(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<ULong, ULong, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
